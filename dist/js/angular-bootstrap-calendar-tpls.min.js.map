{"version":3,"sources":["templates.js","angular-bootstrap-calendar-tpls.js","services/moment.js","services/calendarTitle.js","services/calendarHelper.js","services/calendarDebounce.js","services/calendarConfig.js","filters/calendarTruncateEventTitle.js","filters/calendarLimitTo.js","directives/mwlDateModifier.js","directives/mwlCollapseFallback.js","directives/mwlCalendarYear.js","directives/mwlCalendarWeek.js","directives/mwlCalendarSlideBox.js","directives/mwlCalendarMonth.js","directives/mwlCalendarDay.js","directives/mwlCalendar.js"],"names":["window","$templateCache","angular","run","put","module","constant","moment","factory","weekTitleLabel","day","currentDay","month","format","calendarConfig","titleFormats","week","replace","year","daySelected","undefined","$rootScope","eventIsInPeriod","eventStart","eventEnd","periodStart","periodEnd","getEventsInPeriod","startPeriod","allEvents","filter","endsAt","endPeriod","isAfter","isBefore","isSame","calendarDate","period","startOf","endOf","incrementsBadgeTotal","length","event","startsAt","sharedVariables","events","getWeekDayNames","weekdays","date","count","getYearView","view","eventsInPeriod","dateFormats","weekDay","label","isToday","periodEvents","push","badgeTotal","getBadgeTotal","startOfMonth","endOfMonthView","today","monthEvents","clone","inMonth","eventFilterBy","type","isFuture","isWeekend","isPast","indexOf","isSelected","getWeekView","endOfWeek","days","weekDayLabel","dayCounter","dayLabel","eventsSorted","offset","startOfWeek","map","span","diff","weekViewStart","weekViewEnd","daySpan","dayOffset","calendarStart","calendarEnd","buckets","dayStartHour","dayEndHour","dayHeight","add","calendarHeight","dayHeightMultiplier","toDate","top","height","diffStart","forEach","bucket","canFitInThisBucket","cannotFitInABucket","bucketIndex","bucketItem","readSharedVariables","readDaySelected","writeDaySelected","writeLetChangeTheView","bool","letChangeTheView","getDayView","service","args","$timeout","debounce","immediate","timeout","context","this","arguments","callNow","cancel","apply","later","wait","func","defaultDateFormats","provider","monthConfigs","defaultTitleFormats","i18nStrings","eventsLabel","timeLabel","configProvider","formats","extend","strings","configs","$get","string","boxHeight","substr","limit","begin","Infinity","Math","abs","input","Number","toString","isNaN","slice","directive","max","restrict","controller","$element","isDefined","$scope","$attrs","setToToday","$apply","Date","increment","onClick","decrement","unbind","subtract","bind","$on","scope","$injector","has","unbindWatcher","$watch","mwlCollapseFallback","shouldCollapse","unbindDestroy","addClass","removeClass","templateUrl","onEventClick","onEditEventClick","require","onDeleteEventClick","deleteEventHtml","autoOpen","onTimespanClick","editEventHtml","vm","firstRun","calendarHelper","monthClicked","monthClickedFirstRun","openEvents","openRowIndex","floor","monthIndex","attrs","calendarCtrl","controllerAs","$sce","isOpen","isMonthView","link","elm","ctrls","unselectDaySelected","daysCollection","monthDay","element","monthOffsets","weekDays","getMonthView","rows","i","dayClickedFirstRun","dayClicked","highlightEvent","isOpened","dayIndex","highlightClass","shouldAddClass","dayContainsEvent","changeCurrentDay","dayViewStart","dayViewEnd","dayViewSplit","$log","parseInt","originalLocale","locale","hour","eventClicked","$broadcast","hourWasClicked","params","updateDays","hours","onDrillDownClick","calendarTitle","calendarDebounce","changeDay","changeView","newDay","drillDown","nextView","calendarNextView","viewTitle","refreshCalendar","unbindLocaleWatcher","unbindOnDestroy","unbindDestroyListener"],"mappings":"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","file":"angular-bootstrap-calendar-tpls.min.js","sourcesContent":["angular.module(\"mwl.calendar\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"src/templates/calendar.html\",\"<div class=\\\"cal-context\\\" ng-switch=\\\"view\\\"><div class=\\\"alert alert-danger\\\" ng-switch-default>The value passed to calendar-view is not set</div><mwl-calendar-year events=\\\"events\\\" current-day=\\\"currentDay\\\" on-event-click=\\\"onEventClick\\\" on-edit-event-click=\\\"onEditEventClick\\\" on-delete-event-click=\\\"onDeleteEventClick\\\" on-timespan-click=\\\"onTimespanClick\\\" edit-event-html=\\\"editEventHtml\\\" delete-event-html=\\\"deleteEventHtml\\\" auto-open=\\\"autoOpen\\\" ng-switch-when=\\\"year\\\"></mwl-calendar-year><mwl-calendar-month events=\\\"events\\\" current-day=\\\"currentDay\\\" on-event-click=\\\"onEventClick\\\" on-edit-event-click=\\\"onEditEventClick\\\" on-delete-event-click=\\\"onDeleteEventClick\\\" on-timespan-click=\\\"onTimespanClick\\\" edit-event-html=\\\"editEventHtml\\\" delete-event-html=\\\"deleteEventHtml\\\" auto-open=\\\"autoOpen\\\" ng-switch-when=\\\"month\\\"></mwl-calendar-month><mwl-calendar-week events=\\\"events\\\" current-day=\\\"currentDay\\\" on-event-click=\\\"onEventClick\\\" on-timespan-click=\\\"onTimespanClick\\\" ng-switch-when=\\\"week\\\"></mwl-calendar-week><mwl-calendar-day events=\\\"events\\\" current-day=\\\"currentDay\\\" on-event-click=\\\"onEventClick\\\" day-view-start=\\\"{{ dayViewStart }}\\\" day-view-end=\\\"{{ dayViewEnd }}\\\" day-view-split=\\\"{{ dayViewSplit || 30 }}\\\" ng-switch-when=\\\"day\\\"></mwl-calendar-day></div>\");\n$templateCache.put(\"src/templates/calendarDayView.html\",\"<div class=\\\"cal-day-box\\\"><div class=\\\"row-fluid clearfix cal-row-head\\\"><div class=\\\"span1 col-xs-1 cal-cell\\\">{{ vm.calendarConfig.i18nStrings.timeLabel }}</div><div class=\\\"span11 col-xs-11 cal-cell\\\">{{ vm.calendarConfig.i18nStrings.eventsLabel }}</div></div><div class=\\\"cal-day-panel\\\" class=\\\"clearfix\\\" ng-style=\\\"{height: (vm.days.length * vm.dayHeight) + \\'px\\'}\\\"><div class=\\\"cal-day-panel-hour\\\"><div class=\\\"cal-day-hour\\\" ng-repeat=\\\"day in vm.days track by $index\\\"><div class=\\\"row-fluid cal-day-hour-part\\\" ng-click=\\\"vm.hourWasClicked({$event: $event, day: currentDay, hour: $index, minute: 0})\\\"><div class=\\\"span1 col-xs-1\\\"><strong>{{ day.label }}</strong></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-click=\\\"vm.hourWasClicked({$event: $event, day: currentDay, hour: $index, minute: 0})\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 30\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 30\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 15\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div><div class=\\\"row-fluid cal-day-hour-part\\\" ng-show=\\\"vm.dayViewSplit < 15\\\"><div class=\\\"span1 col-xs-1\\\"></div><div class=\\\"span11 col-xs-11\\\"></div></div></div></div><div class=\\\"pull-left day-event day-highlight dh-event-{{ event.type }}\\\" ng-repeat=\\\"event in vm.view track by $index\\\" ng-style=\\\"{top: event.top + \\'px\\', left: event.left + 60 + \\'px\\', height: event.height + \\'px\\'}\\\"><a href=\\\"javascript:;\\\" class=\\\"event-item\\\" ng-click=\\\"vm.eventClicked({$event: event})\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\"><span>{{ event.title | calendarTruncateEventTitle:20:event.height }}</span></a></div></div></div>\");\n$templateCache.put(\"src/templates/calendarMonthDay.html\",\"<div ng-click=\\\"vm.calendarCtrl.drillDown(day.date)\\\" class=\\\"cal-month-day\\\" ng-class=\\\"{\\n            \\'cal-day-outmonth\\': !day.inMonth,\\n            \\'cal-day-inmonth\\': day.inMonth,\\n            \\'cal-day-weekend\\': day.isWeekend,\\n            \\'cal-day-past\\': day.isPast,\\n            \\'cal-day-today\\': day.isToday,\\n            \\'cal-day-future\\': day.isFuture,\\n            \\'cal-day-selected\\': day.isSelected\\n          }\\\"><small class=\\\"cal-events-num badge badge-important pull-left\\\" ng-show=\\\"day.badgeTotal > 0\\\">{{ day.badgeTotal }}</small> <span class=\\\"pull-right\\\" data-cal-date ng-click=\\\"vm.calendarCtrl.drillDown(day.date, false)\\\">{{ day.label }}</span><div class=\\\"cal-day-tick\\\" ng-show=\\\"day.isOpened\\\"><i class=\\\"glyphicon glyphicon-chevron-up\\\"></i> <i class=\\\"fa fa-chevron-up\\\"></i></div><div ng-include=\\\"\\'src/templates/calendarMonthEventsList.html\\'\\\"></div></div>\");\n$templateCache.put(\"src/templates/calendarMonthEventsList.html\",\"<div class=\\\"events-list\\\" ng-show=\\\"day.events.length > 0\\\"><a href=\\\"javascript:;\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\" ng-repeat=\\\"event in day.events track by $index\\\" class=\\\"pull-left event event-{{ event.type }}\\\" ng-mouseenter=\\\"vm.highlightEvent(event, true)\\\" ng-mouseleave=\\\"vm.highlightEvent(event, false)\\\" tooltip-append-to-body=\\\"true\\\" tooltip=\\\"{{ event.title }}\\\"></a></div>\");\n$templateCache.put(\"src/templates/calendarMonthView.html\",\"<div class=\\\"cal-row-fluid cal-row-head\\\"><div class=\\\"cal-cell1\\\" ng-repeat=\\\"day in vm.weekDays track by $index\\\">{{ day }}</div></div><div class=\\\"cal-month-box\\\"><div ng-repeat=\\\"rowOffset in vm.monthOffsets track by rowOffset\\\"><div class=\\\"cal-row-fluid cal-before-eventlist\\\"><div ng-repeat=\\\"day in vm.view | calendarLimitTo:7:rowOffset track by $index\\\" class=\\\"cal-cell1 cal-cell {{ day.highlightClass }}\\\" ng-click=\\\"vm.dayClicked(day)\\\" ng-class=\\\"{pointer: day.events.length > 0}\\\"><div ng-include=\\\"\\'src/templates/calendarMonthDay.html\\'\\\"></div></div></div><mwl-calendar-slide-box is-open=\\\"vm.openRowIndex === $index\\\" events=\\\"vm.openEvents\\\" on-event-click=\\\"onEventClick\\\" edit-event-html=\\\"editEventHtml\\\" on-edit-event-click=\\\"onEditEventClick\\\" delete-event-html=\\\"deleteEventHtml\\\" on-delete-event-click=\\\"onDeleteEventClick\\\"></mwl-calendar-slide-box></div></div>\");\n$templateCache.put(\"src/templates/calendarSlideBox.html\",\"<div class=\\\"cal-slide-box\\\" collapse=\\\"vm.shouldCollapse\\\" mwl-collapse-fallback=\\\"vm.shouldCollapse\\\"><div class=\\\"cal-slide-content cal-event-list\\\"><ul class=\\\"unstyled list-unstyled\\\"><li ng-repeat=\\\"event in events track by $index\\\"><span class=\\\"pull-left event\\\" ng-class=\\\"\\'event-\\' + event.type\\\"></span> &nbsp; <a href=\\\"javascript:;\\\" class=\\\"event-item\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\">{{ event.title }} <span ng-show=\\\"isMonthView\\\">({{ event.startsAt | date:\\'shortTime\\' }})</span> <span ng-show=\\\"isYearView\\\">({{ event.startsAt | date:\\'MMM d, h:mm a\\' }})</span></a> <a href=\\\"javascript:;\\\" class=\\\"event-item-edit\\\" ng-if=\\\"editEventHtml && event.editable !== false\\\" ng-bind-html=\\\"vm.$sce.trustAsHtml(editEventHtml)\\\" ng-click=\\\"onEditEventClick({calendarEvent: event})\\\"></a> <a href=\\\"javascript:;\\\" class=\\\"event-item-delete\\\" ng-if=\\\"deleteEventHtml && event.deletable !== false\\\" ng-bind-html=\\\"vm.$sce.trustAsHtml(deleteEventHtml)\\\" ng-click=\\\"onDeleteEventClick({calendarEvent: event})\\\"></a></li></ul></div></div>\");\n$templateCache.put(\"src/templates/calendarWeekView.html\",\"<div class=\\\"cal-week-box\\\"><div class=\\\"cal-row-fluid cal-row-head\\\"><div class=\\\"cal-cell1\\\" ng-repeat=\\\"day in vm.view.days track by $index\\\" ng-class=\\\"{\\n        \\'cal-day-weekend\\': day.isWeekend,\\n        \\'cal-day-past\\': day.isPast,\\n        \\'cal-day-today\\': day.isToday,\\n        \\'cal-day-future\\': day.isFuture}\\\">{{ day.weekDayLabel }}<br><small><span data-cal-date ng-click=\\\"vm.calendarCtrl.drillDown(day.date.toDate())\\\" class=\\\"pointer\\\">{{ day.dayLabel }}</span></small></div></div><div class=\\\"cal-row-fluid\\\" ng-repeat=\\\"event in vm.view.events track by $index\\\"><div class=\\\"cal-cell{{ event.daySpan }} cal-offset{{ event.dayOffset }} day-highlight dh-event-{{ event.type }}\\\" data-event-class><a href=\\\"javascript:;\\\" ng-click=\\\"onEventClick({calendarEvent: event})\\\" class=\\\"cal-event-week\\\">{{ event.title }}</a></div></div></div>\");\n$templateCache.put(\"src/templates/calendarYearView.html\",\"<div class=\\\"cal-year-box\\\"><div ng-repeat=\\\"rowOffset in [0, 4, 8] track by rowOffset\\\"><div class=\\\"row cal-before-eventlist\\\"><div class=\\\"span3 col-md-3 col-xs-6 cal-cell\\\" ng-repeat=\\\"month in vm.view | calendarLimitTo:4:rowOffset track by $index\\\" ng-click=\\\"vm.monthClicked(month)\\\" ng-class=\\\"{pointer: month.events.length > 0, \\'cal-day-today\\': month.isToday}\\\"><span class=\\\"pull-right\\\" data-cal-date ng-click=\\\"vm.calendarCtrl.drillDown(month.date)\\\">{{ month.label }}</span> <small class=\\\"cal-events-num badge badge-important pull-left\\\" ng-show=\\\"month.badgeTotal > 0\\\">{{ month.badgeTotal }}</small><div class=\\\"cal-day-tick\\\" ng-show=\\\"month.isOpened\\\"><i class=\\\"glyphicon glyphicon-chevron-up\\\"></i> <i class=\\\"fa fa-chevron-up\\\"></i></div></div></div><mwl-calendar-slide-box is-open=\\\"vm.openRowIndex === $index\\\" events=\\\"vm.openEvents\\\" on-event-click=\\\"onEventClick\\\" edit-event-html=\\\"editEventHtml\\\" on-edit-event-click=\\\"onEditEventClick\\\" delete-event-html=\\\"deleteEventHtml\\\" on-delete-event-click=\\\"onDeleteEventClick\\\"></mwl-calendar-slide-box></div></div>\");}]);","/**\n * angular-bootstrap-calendar - A pure AngularJS bootstrap themed responsive calendar that can display events and has views for year, month, week and day\n * @version v0.9.2\n * @link https://github.com/mattlewis92/angular-bootstrap-calendar\n * @license MIT\n */\n(function (window, angular) {\n    'use strict';\n    angular.module('mwl.calendar', []);\n    angular.module('mwl.calendar').run([\n        '$templateCache',\n        function ($templateCache) {\n            $templateCache.put('src/templates/calendar.html', '<div class=\"cal-context\" ng-switch=\"view\"><div class=\"alert alert-danger\" ng-switch-default>The value passed to calendar-view is not set</div><mwl-calendar-year events=\"events\" current-day=\"currentDay\" on-event-click=\"onEventClick\" on-edit-event-click=\"onEditEventClick\" on-delete-event-click=\"onDeleteEventClick\" on-timespan-click=\"onTimespanClick\" edit-event-html=\"editEventHtml\" delete-event-html=\"deleteEventHtml\" auto-open=\"autoOpen\" ng-switch-when=\"year\"></mwl-calendar-year><mwl-calendar-month events=\"events\" current-day=\"currentDay\" on-event-click=\"onEventClick\" on-edit-event-click=\"onEditEventClick\" on-delete-event-click=\"onDeleteEventClick\" on-timespan-click=\"onTimespanClick\" edit-event-html=\"editEventHtml\" delete-event-html=\"deleteEventHtml\" auto-open=\"autoOpen\" ng-switch-when=\"month\"></mwl-calendar-month><mwl-calendar-week events=\"events\" current-day=\"currentDay\" on-event-click=\"onEventClick\" on-timespan-click=\"onTimespanClick\" ng-switch-when=\"week\"></mwl-calendar-week><mwl-calendar-day events=\"events\" current-day=\"currentDay\" on-event-click=\"onEventClick\" day-view-start=\"{{ dayViewStart }}\" day-view-end=\"{{ dayViewEnd }}\" day-view-split=\"{{ dayViewSplit || 30 }}\" ng-switch-when=\"day\"></mwl-calendar-day></div>');\n            $templateCache.put('src/templates/calendarDayView.html', '<div class=\"cal-day-box\"><div class=\"row-fluid clearfix cal-row-head\"><div class=\"span1 col-xs-1 cal-cell\">{{ vm.calendarConfig.i18nStrings.timeLabel }}</div><div class=\"span11 col-xs-11 cal-cell\">{{ vm.calendarConfig.i18nStrings.eventsLabel }}</div></div><div class=\"cal-day-panel\" class=\"clearfix\" ng-style=\"{height: (vm.days.length * vm.dayHeight) + \\'px\\'}\"><div class=\"cal-day-panel-hour\"><div class=\"cal-day-hour\" ng-repeat=\"day in vm.days track by $index\"><div class=\"row-fluid cal-day-hour-part\" ng-click=\"vm.hourWasClicked({$event: $event, day: currentDay, hour: $index, minute: 0})\"><div class=\"span1 col-xs-1\"><strong>{{ day.label }}</strong></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-click=\"vm.hourWasClicked({$event: $event, day: currentDay, hour: $index, minute: 0})\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 30\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 30\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 15\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div><div class=\"row-fluid cal-day-hour-part\" ng-show=\"vm.dayViewSplit < 15\"><div class=\"span1 col-xs-1\"></div><div class=\"span11 col-xs-11\"></div></div></div></div><div class=\"pull-left day-event day-highlight dh-event-{{ event.type }}\" ng-repeat=\"event in vm.view track by $index\" ng-style=\"{top: event.top + \\'px\\', left: event.left + 60 + \\'px\\', height: event.height + \\'px\\'}\"><a href=\"javascript:;\" class=\"event-item\" ng-click=\"vm.eventClicked({$event: event})\" ng-click=\"onEventClick({calendarEvent: event})\"><span>{{ event.title | calendarTruncateEventTitle:20:event.height }}</span></a></div></div></div>');\n            $templateCache.put('src/templates/calendarMonthDay.html', '<div ng-click=\"vm.calendarCtrl.drillDown(day.date)\" class=\"cal-month-day\" ng-class=\"{\\n            \\'cal-day-outmonth\\': !day.inMonth,\\n            \\'cal-day-inmonth\\': day.inMonth,\\n            \\'cal-day-weekend\\': day.isWeekend,\\n            \\'cal-day-past\\': day.isPast,\\n            \\'cal-day-today\\': day.isToday,\\n            \\'cal-day-future\\': day.isFuture,\\n            \\'cal-day-selected\\': day.isSelected\\n          }\"><small class=\"cal-events-num badge badge-important pull-left\" ng-show=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</small> <span class=\"pull-right\" data-cal-date ng-click=\"vm.calendarCtrl.drillDown(day.date, false)\">{{ day.label }}</span><div class=\"cal-day-tick\" ng-show=\"day.isOpened\"><i class=\"glyphicon glyphicon-chevron-up\"></i> <i class=\"fa fa-chevron-up\"></i></div><div ng-include=\"\\'src/templates/calendarMonthEventsList.html\\'\"></div></div>');\n            $templateCache.put('src/templates/calendarMonthEventsList.html', '<div class=\"events-list\" ng-show=\"day.events.length > 0\"><a href=\"javascript:;\" ng-click=\"onEventClick({calendarEvent: event})\" ng-repeat=\"event in day.events track by $index\" class=\"pull-left event event-{{ event.type }}\" ng-mouseenter=\"vm.highlightEvent(event, true)\" ng-mouseleave=\"vm.highlightEvent(event, false)\" tooltip-append-to-body=\"true\" tooltip=\"{{ event.title }}\"></a></div>');\n            $templateCache.put('src/templates/calendarMonthView.html', '<div class=\"cal-row-fluid cal-row-head\"><div class=\"cal-cell1\" ng-repeat=\"day in vm.weekDays track by $index\">{{ day }}</div></div><div class=\"cal-month-box\"><div ng-repeat=\"rowOffset in vm.monthOffsets track by rowOffset\"><div class=\"cal-row-fluid cal-before-eventlist\"><div ng-repeat=\"day in vm.view | calendarLimitTo:7:rowOffset track by $index\" class=\"cal-cell1 cal-cell {{ day.highlightClass }}\" ng-click=\"vm.dayClicked(day)\" ng-class=\"{pointer: day.events.length > 0}\"><div ng-include=\"\\'src/templates/calendarMonthDay.html\\'\"></div></div></div><mwl-calendar-slide-box is-open=\"vm.openRowIndex === $index\" events=\"vm.openEvents\" on-event-click=\"onEventClick\" edit-event-html=\"editEventHtml\" on-edit-event-click=\"onEditEventClick\" delete-event-html=\"deleteEventHtml\" on-delete-event-click=\"onDeleteEventClick\"></mwl-calendar-slide-box></div></div>');\n            $templateCache.put('src/templates/calendarSlideBox.html', '<div class=\"cal-slide-box\" collapse=\"vm.shouldCollapse\" mwl-collapse-fallback=\"vm.shouldCollapse\"><div class=\"cal-slide-content cal-event-list\"><ul class=\"unstyled list-unstyled\"><li ng-repeat=\"event in events track by $index\"><span class=\"pull-left event\" ng-class=\"\\'event-\\' + event.type\"></span> &nbsp; <a href=\"javascript:;\" class=\"event-item\" ng-click=\"onEventClick({calendarEvent: event})\">{{ event.title }} <span ng-show=\"isMonthView\">({{ event.startsAt | date:\\'shortTime\\' }})</span> <span ng-show=\"isYearView\">({{ event.startsAt | date:\\'MMM d, h:mm a\\' }})</span></a> <a href=\"javascript:;\" class=\"event-item-edit\" ng-if=\"editEventHtml && event.editable !== false\" ng-bind-html=\"vm.$sce.trustAsHtml(editEventHtml)\" ng-click=\"onEditEventClick({calendarEvent: event})\"></a> <a href=\"javascript:;\" class=\"event-item-delete\" ng-if=\"deleteEventHtml && event.deletable !== false\" ng-bind-html=\"vm.$sce.trustAsHtml(deleteEventHtml)\" ng-click=\"onDeleteEventClick({calendarEvent: event})\"></a></li></ul></div></div>');\n            $templateCache.put('src/templates/calendarWeekView.html', '<div class=\"cal-week-box\"><div class=\"cal-row-fluid cal-row-head\"><div class=\"cal-cell1\" ng-repeat=\"day in vm.view.days track by $index\" ng-class=\"{\\n        \\'cal-day-weekend\\': day.isWeekend,\\n        \\'cal-day-past\\': day.isPast,\\n        \\'cal-day-today\\': day.isToday,\\n        \\'cal-day-future\\': day.isFuture}\">{{ day.weekDayLabel }}<br><small><span data-cal-date ng-click=\"vm.calendarCtrl.drillDown(day.date.toDate())\" class=\"pointer\">{{ day.dayLabel }}</span></small></div></div><div class=\"cal-row-fluid\" ng-repeat=\"event in vm.view.events track by $index\"><div class=\"cal-cell{{ event.daySpan }} cal-offset{{ event.dayOffset }} day-highlight dh-event-{{ event.type }}\" data-event-class><a href=\"javascript:;\" ng-click=\"onEventClick({calendarEvent: event})\" class=\"cal-event-week\">{{ event.title }}</a></div></div></div>');\n            $templateCache.put('src/templates/calendarYearView.html', '<div class=\"cal-year-box\"><div ng-repeat=\"rowOffset in [0, 4, 8] track by rowOffset\"><div class=\"row cal-before-eventlist\"><div class=\"span3 col-md-3 col-xs-6 cal-cell\" ng-repeat=\"month in vm.view | calendarLimitTo:4:rowOffset track by $index\" ng-click=\"vm.monthClicked(month)\" ng-class=\"{pointer: month.events.length > 0, \\'cal-day-today\\': month.isToday}\"><span class=\"pull-right\" data-cal-date ng-click=\"vm.calendarCtrl.drillDown(month.date)\">{{ month.label }}</span> <small class=\"cal-events-num badge badge-important pull-left\" ng-show=\"month.badgeTotal > 0\">{{ month.badgeTotal }}</small><div class=\"cal-day-tick\" ng-show=\"month.isOpened\"><i class=\"glyphicon glyphicon-chevron-up\"></i> <i class=\"fa fa-chevron-up\"></i></div></div></div><mwl-calendar-slide-box is-open=\"vm.openRowIndex === $index\" events=\"vm.openEvents\" on-event-click=\"onEventClick\" edit-event-html=\"editEventHtml\" on-edit-event-click=\"onEditEventClick\" delete-event-html=\"deleteEventHtml\" on-delete-event-click=\"onDeleteEventClick\"></mwl-calendar-slide-box></div></div>');\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').constant('moment', window.moment);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarTitle', [\n        'moment',\n        'calendarConfig',\n        function (moment, calendarConfig) {\n            function day(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.day);\n            }\n            function week(currentDay) {\n                var weekTitleLabel = calendarConfig.titleFormats.week;\n                return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n            }\n            function month(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.month);\n            }\n            function year(currentDay) {\n                return moment(currentDay).format(calendarConfig.titleFormats.year);\n            }\n            return {\n                day: day,\n                week: week,\n                month: month,\n                year: year\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').factory('calendarHelper', [\n        '$rootScope',\n        'moment',\n        'calendarConfig',\n        function ($rootScope, moment, calendarConfig) {\n            var sharedVariables = {\n                daySelected: undefined,\n                currentDay: undefined,\n                letChangeTheView: true\n            };\n            function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n                eventStart = moment(eventStart);\n                eventEnd = moment(eventEnd);\n                periodStart = moment(periodStart);\n                periodEnd = moment(periodEnd);\n                return eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd) || eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd) || eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd) || eventStart.isSame(periodStart) || eventEnd.isSame(periodEnd);\n            }\n            function getEventsInPeriod(calendarDate, period, allEvents) {\n                var startPeriod = moment(calendarDate).startOf(period);\n                var endPeriod = moment(calendarDate).endOf(period);\n                return allEvents.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n                });\n            }\n            function getBadgeTotal(events) {\n                return events.filter(function (event) {\n                    return event.incrementsBadgeTotal !== false;\n                }).length;\n            }\n            function dayStillSelected(day) {\n                if (sharedVariables.daySelected !== undefined) {\n                    return moment(day).format('MMMM Do YYYY') === moment(sharedVariables.daySelected.date).format('MMMM Do YYYY');\n                }\n                return false;\n            }\n            function getWeekDayNames() {\n                var weekdays = [];\n                var count = 0;\n                while (count < 7) {\n                    weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n                }\n                return weekdays;\n            }\n            function getYearView(events, currentDay) {\n                var view = [];\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n                var month = moment(currentDay).startOf('year');\n                var count = 0;\n                while (count < 12) {\n                    var startPeriod = month.clone();\n                    var endPeriod = startPeriod.clone().endOf('month');\n                    var periodEvents = eventsInPeriod.filter(function (event) {\n                        return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n                    });\n                    view.push({\n                        label: startPeriod.format(calendarConfig.dateFormats.month),\n                        isToday: startPeriod.isSame(moment().startOf('month')),\n                        events: periodEvents,\n                        date: startPeriod,\n                        badgeTotal: getBadgeTotal(periodEvents)\n                    });\n                    month.add(1, 'month');\n                    count++;\n                }\n                return view;\n            }\n            function getMonthView(events, currentDay) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n                var startOfMonth = moment(currentDay).startOf('month');\n                var day = startOfMonth.clone().startOf('week');\n                var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n                var view = [];\n                var today = moment().startOf('day');\n                while (day.isBefore(endOfMonthView)) {\n                    var inMonth = day.month() === moment(currentDay).month();\n                    var monthEvents = [];\n                    if (inMonth) {\n                        monthEvents = eventsInPeriod.filter(function (event) {\n                            return eventIsInPeriod(event.startsAt, event.endsAt, day, day.clone().endOf('day'));\n                        });\n                        if (calendarConfig.month.eventFilterBy !== undefined) {\n                            monthEvents = monthEvents.filter(function (event) {\n                                return event.type === calendarConfig.month.eventFilterBy;\n                            });\n                        }\n                    }\n                    view.push({\n                        label: day.date(),\n                        date: day.clone(),\n                        inMonth: inMonth,\n                        isPast: today.isAfter(day),\n                        isToday: today.isSame(day),\n                        isFuture: today.isBefore(day),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(day.day()) > -1,\n                        events: monthEvents,\n                        badgeTotal: getBadgeTotal(monthEvents),\n                        isSelected: dayStillSelected(day.clone())    // when user clicks the day is 'true'\n                    });\n                    day.add(1, 'day');\n                }\n                return view;\n            }\n            function getWeekView(events, currentDay) {\n                var startOfWeek = moment(currentDay).startOf('week');\n                var endOfWeek = moment(currentDay).endOf('week');\n                var dayCounter = startOfWeek.clone();\n                var days = [];\n                var today = moment().startOf('day');\n                while (days.length < 7) {\n                    days.push({\n                        weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n                        date: dayCounter.clone(),\n                        dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n                        isPast: dayCounter.isBefore(today),\n                        isToday: dayCounter.isSame(today),\n                        isFuture: dayCounter.isAfter(today),\n                        isWeekend: [\n                            0,\n                            6\n                        ].indexOf(dayCounter.day()) > -1\n                    });\n                    dayCounter.add(1, 'day');\n                }\n                var eventsSorted = events.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.endsAt, startOfWeek, endOfWeek);\n                }).map(function (event) {\n                    var eventStart = moment(event.startsAt).startOf('day');\n                    var eventEnd = moment(event.endsAt).startOf('day');\n                    var weekViewStart = moment(startOfWeek).startOf('day');\n                    var weekViewEnd = moment(endOfWeek).startOf('day');\n                    var offset, span;\n                    if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n                        offset = 0;\n                    } else {\n                        offset = eventStart.diff(weekViewStart, 'days');\n                    }\n                    if (eventEnd.isAfter(weekViewEnd)) {\n                        eventEnd = weekViewEnd;\n                    }\n                    if (eventStart.isBefore(weekViewStart)) {\n                        eventStart = weekViewStart;\n                    }\n                    span = moment(eventEnd).diff(eventStart, 'days') + 1;\n                    event.daySpan = span;\n                    event.dayOffset = offset;\n                    return event;\n                });\n                return {\n                    days: days,\n                    events: eventsSorted\n                };\n            }\n            function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n                var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n                var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n                var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n                var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n                var dayHeightMultiplier = dayHeight / 60;\n                var buckets = [];\n                return eventsInPeriod.filter(function (event) {\n                    return eventIsInPeriod(event.startsAt, event.endsAt, moment(currentDay).startOf('day').toDate(), moment(currentDay).endOf('day').toDate());\n                }).map(function (event) {\n                    if (moment(event.startsAt).isBefore(calendarStart)) {\n                        event.top = 0;\n                    } else {\n                        event.top = moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier - 2;\n                    }\n                    if (moment(event.endsAt).isAfter(calendarEnd)) {\n                        event.height = calendarHeight - event.top;\n                    } else {\n                        var diffStart = event.startsAt;\n                        if (moment(event.startsAt).isBefore(calendarStart)) {\n                            diffStart = calendarStart.toDate();\n                        }\n                        event.height = moment(event.endsAt).diff(diffStart, 'minutes') * dayHeightMultiplier;\n                    }\n                    if (event.top - event.height > calendarHeight) {\n                        event.height = 0;\n                    }\n                    event.left = 0;\n                    return event;\n                }).filter(function (event) {\n                    return event.height > 0;\n                }).map(function (event) {\n                    var cannotFitInABucket = true;\n                    buckets.forEach(function (bucket, bucketIndex) {\n                        var canFitInThisBucket = true;\n                        bucket.forEach(function (bucketItem) {\n                            if (eventIsInPeriod(event.startsAt, event.endsAt, bucketItem.startsAt, bucketItem.endsAt) || eventIsInPeriod(bucketItem.startsAt, bucketItem.endsAt, event.startsAt, event.endsAt)) {\n                                canFitInThisBucket = false;\n                            }\n                        });\n                        if (canFitInThisBucket && cannotFitInABucket) {\n                            cannotFitInABucket = false;\n                            event.left = bucketIndex * 150;\n                            buckets[bucketIndex].push(event);\n                        }\n                    });\n                    if (cannotFitInABucket) {\n                        event.left = buckets.length * 150;\n                        buckets.push([event]);\n                    }\n                    return event;\n                });\n            }\n            function readSharedVariables() {\n                return sharedVariables;\n            }\n            function readDaySelected() {\n                return sharedVariables.daySelected;\n            }\n            function writeDaySelected(day) {\n                sharedVariables.daySelected = day;\n                $rootScope.$broadcast('dayWasSelected');\n            }\n            function writeLetChangeTheView(bool) {\n                if (bool === undefined) {\n                    bool = true;\n                }\n                sharedVariables.letChangeTheView = bool;\n            }\n            return {\n                getWeekDayNames: getWeekDayNames,\n                getYearView: getYearView,\n                getMonthView: getMonthView,\n                getWeekView: getWeekView,\n                getDayView: getDayView,\n                readSharedVariables: readSharedVariables,\n                readDaySelected: readDaySelected,\n                writeDaySelected: writeDaySelected,\n                writeLetChangeTheView: writeLetChangeTheView\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').service('calendarDebounce', [\n        '$timeout',\n        function ($timeout) {\n            function debounce(func, wait, immediate) {\n                var timeout;\n                return function () {\n                    var context = this, args = arguments;\n                    var later = function () {\n                        timeout = null;\n                        if (!immediate) {\n                            func.apply(context, args);\n                        }\n                    };\n                    var callNow = immediate && !timeout;\n                    $timeout.cancel(timeout);\n                    timeout = $timeout(later, wait);\n                    if (callNow) {\n                        func.apply(context, args);\n                    }\n                };\n            }\n            return debounce;\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').provider('calendarConfig', function () {\n        var monthConfigs = { eventFilterBy: undefined };\n        var defaultDateFormats = {\n            hour: 'ha',\n            day: 'D MMM',\n            month: 'MMMM',\n            weekDay: 'dddd'\n        };\n        var defaultTitleFormats = {\n            day: 'dddd D MMMM, YYYY',\n            week: 'Week {week} of {year}',\n            month: 'MMMM YYYY',\n            year: 'YYYY'\n        };\n        var i18nStrings = {\n            eventsLabel: 'Events',\n            timeLabel: 'Time'\n        };\n        var configProvider = this;\n        configProvider.setDateFormats = function (formats) {\n            angular.extend(defaultDateFormats, formats);\n            return configProvider;\n        };\n        configProvider.setTitleFormats = function (formats) {\n            angular.extend(defaultTitleFormats, formats);\n            return configProvider;\n        };\n        configProvider.setI18nStrings = function (strings) {\n            angular.extend(i18nStrings, strings);\n            return configProvider;\n        };\n        configProvider.setMonthConfigs = function (configs) {\n            angular.extend(monthConfigs, configs);\n            return configProvider;\n        };\n        configProvider.$get = function () {\n            return {\n                dateFormats: defaultDateFormats,\n                titleFormats: defaultTitleFormats,\n                i18nStrings: i18nStrings,\n                month: monthConfigs\n            };\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarTruncateEventTitle', function () {\n        return function (string, length, boxHeight) {\n            if (!string) {\n                return '';\n            }\n            //Only truncate if if actually needs truncating\n            if (string.length >= length && string.length / 20 > boxHeight / 30) {\n                return string.substr(0, length) + '...';\n            } else {\n                return string;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').filter('calendarLimitTo', function () {\n        //Copied from the angular source. Only 1.4 has the begin functionality.\n        return function (input, limit, begin) {\n            if (Math.abs(Number(limit)) === Infinity) {\n                limit = Number(limit);\n            } else {\n                limit = parseInt(limit);\n            }\n            if (isNaN(limit)) {\n                return input;\n            }\n            if (angular.isNumber(input)) {\n                input = input.toString();\n            }\n            if (!angular.isArray(input) && !angular.isString(input)) {\n                return input;\n            }\n            begin = !begin || isNaN(begin) ? 0 : parseInt(begin);\n            begin = begin < 0 && begin >= -input.length ? input.length + begin : begin;\n            if (limit >= 0) {\n                return input.slice(begin, begin + limit);\n            } else {\n                if (begin === 0) {\n                    return input.slice(limit, input.length);\n                } else {\n                    return input.slice(Math.max(0, begin + limit), begin);\n                }\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlDateModifier', function () {\n        return {\n            restrict: 'A',\n            controller: [\n                '$element',\n                '$attrs',\n                '$scope',\n                'moment',\n                function ($element, $attrs, $scope, moment) {\n                    function onClick() {\n                        if (angular.isDefined($attrs.setToToday)) {\n                            $scope.date = new Date();\n                        } else if (angular.isDefined($attrs.increment)) {\n                            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n                        } else if (angular.isDefined($attrs.decrement)) {\n                            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n                        }\n                        $scope.$apply();\n                    }\n                    $element.bind('click', onClick);\n                    $scope.$on('$destroy', function () {\n                        $element.unbind('click', onClick);\n                    });\n                }\n            ],\n            scope: {\n                date: '=',\n                increment: '=',\n                decrement: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCollapseFallback', [\n        '$injector',\n        function ($injector) {\n            if ($injector.has('collapseDirective')) {\n                return {};\n            }\n            return {\n                restrict: 'A',\n                controller: [\n                    '$scope',\n                    '$attrs',\n                    '$element',\n                    function ($scope, $attrs, $element) {\n                        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function (shouldCollapse) {\n                            if (shouldCollapse) {\n                                $element.addClass('ng-hide');\n                            } else {\n                                $element.removeClass('ng-hide');\n                            }\n                        });\n                        var unbindDestroy = $scope.$on('$destroy', function () {\n                            unbindDestroy();\n                            unbindWatcher();\n                        });\n                    }\n                ]\n            };\n        }\n    ]);\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarYear', function () {\n        return {\n            templateUrl: 'src/templates/calendarYearView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    var vm = this;\n                    var firstRun = true;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (month) {\n                                if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                                    vm.monthClicked(month, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.monthClicked = function (month, monthClickedFirstRun) {\n                        if (!monthClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: month.date.toDate() });\n                        }\n                        vm.openEvents = month.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var monthIndex = vm.view.indexOf(month);\n                            vm.openRowIndex = Math.floor(monthIndex / 4);\n                        }\n                    };\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarWeek', function () {\n        return {\n            templateUrl: 'src/templates/calendarWeekView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'calendarHelper',\n                function ($scope, calendarHelper) {\n                    var vm = this;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarSlideBox', function () {\n        return {\n            restrict: 'EA',\n            templateUrl: 'src/templates/calendarSlideBox.html',\n            replace: true,\n            controller: [\n                '$scope',\n                '$sce',\n                function ($scope, $sce) {\n                    var vm = this;\n                    vm.$sce = $sce;\n                    var unbindWatcher = $scope.$watch('isOpen', function (isOpen) {\n                        vm.shouldCollapse = !isOpen;\n                    });\n                    var unbindDestroy = $scope.$on('$destroy', function () {\n                        unbindDestroy();\n                        unbindWatcher();\n                    });\n                }\n            ],\n            controllerAs: 'vm',\n            require: [\n                '^?mwlCalendarMonth',\n                '^?mwlCalendarYear'\n            ],\n            link: function (scope, elm, attrs, ctrls) {\n                scope.isMonthView = !!ctrls[0];\n                scope.isYearView = !!ctrls[1];\n            },\n            scope: {\n                isOpen: '=',\n                events: '=',\n                onEventClick: '=',\n                editEventHtml: '=',\n                onEditEventClick: '=',\n                deleteEventHtml: '=',\n                onDeleteEventClick: '='\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarMonth', function () {\n        return {\n            templateUrl: 'src/templates/calendarMonthView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                onEditEventClick: '=',\n                onDeleteEventClick: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                onTimespanClick: '='\n            },\n            controller: [\n                '$scope',\n                'moment',\n                'calendarHelper',\n                function ($scope, moment, calendarHelper) {\n                    var vm = this;\n                    var firstRun = true;\n                    $scope.$on('calendar.refreshView', function () {\n                        vm.weekDays = calendarHelper.getWeekDayNames();\n                        vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n                        var rows = Math.floor(vm.view.length / 7);\n                        vm.monthOffsets = [];\n                        for (var i = 0; i < rows; i++) {\n                            vm.monthOffsets.push(i * 7);\n                        }\n                        //Auto open the calendar to the current day if set\n                        if ($scope.autoOpen && firstRun) {\n                            firstRun = false;\n                            vm.view.forEach(function (day) {\n                                if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                                    vm.dayClicked(day, true);\n                                }\n                            });\n                        }\n                    });\n                    vm.dayClicked = function (day, dayClickedFirstRun) {\n                        unselectDaySelected(vm.view);\n                        day.isSelected = true;\n                        calendarHelper.writeDaySelected(day);\n                        if (!dayClickedFirstRun) {\n                            $scope.onTimespanClick({ calendarDate: day.date.toDate() });\n                        }\n                        vm.view.forEach(function (monthDay) {\n                            monthDay.isOpened = false;\n                        });\n                        vm.openEvents = day.events;\n                        vm.openRowIndex = null;\n                        if (vm.openEvents.length > 0) {\n                            var dayIndex = vm.view.indexOf(day);\n                            vm.openRowIndex = Math.floor(dayIndex / 7);\n                            day.isOpened = true;\n                        }\n                    };\n                    vm.highlightEvent = function (event, shouldAddClass) {\n                        vm.view.forEach(function (day) {\n                            delete day.highlightClass;\n                            if (shouldAddClass) {\n                                var dayContainsEvent = day.events.indexOf(event) > -1;\n                                if (dayContainsEvent) {\n                                    day.highlightClass = 'day-highlight dh-event-' + event.type;\n                                }\n                            }\n                        });\n                    };\n                    function unselectDaySelected(daysCollection) {\n                        daysCollection.forEach(function (monthDay) {\n                            monthDay.isSelected = false;\n                        });\n                    }\n                }\n            ],\n            controllerAs: 'vm',\n            link: function (scope, element, attrs, calendarCtrl) {\n                scope.vm.calendarCtrl = calendarCtrl;\n                scope.vm.changeCurrentDay = function (date) {\n                    scope.currentDay = date;\n                };\n            }\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendarDay', function () {\n        return {\n            templateUrl: 'src/templates/calendarDayView.html',\n            restrict: 'EA',\n            require: '^mwlCalendar',\n            scope: {\n                events: '=',\n                currentDay: '=',\n                onEventClick: '=',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$filter',\n                '$log',\n                '$rootScope',\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarHelper',\n                'calendarConfig',\n                function ($filter, $log, $rootScope, $scope, $timeout, moment, calendarHelper, calendarConfig) {\n                    var vm = this;\n                    var dayViewStart, dayViewEnd;\n                    vm.calendarConfig = calendarConfig;\n                    vm.hourWasClicked = function (params) {\n                        $rootScope.$broadcast('hourWasClicked', params);\n                        $log.debug('hourWasClicked');\n                    };\n                    vm.eventClicked = function (params) {\n                        $rootScope.$broadcast('eventWasClicked', params);\n                        $log.debug('eventWasClicked');\n                    };\n                    function updateDays() {\n                        dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n                        dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n                        vm.dayViewSplit = parseInt($scope.dayViewSplit);\n                        vm.dayHeight = 60 / $scope.dayViewSplit * 30;\n                        vm.days = [];\n                        var dayCounter = moment(dayViewStart);\n                        for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n                            vm.days.push({ label: dayCounter.format(calendarConfig.dateFormats.hour) });\n                            dayCounter.add(1, 'hour');\n                        }\n                    }\n                    var originalLocale = moment.locale();\n                    $scope.$on('calendar.refreshView', function () {\n                        if (originalLocale !== moment.locale()) {\n                            originalLocale = moment.locale();\n                            updateDays();\n                        }\n                        vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.dayHeight);\n                    });\n                    updateDays();\n                }\n            ],\n            controllerAs: 'vm'\n        };\n    });\n    'use strict';\n    angular.module('mwl.calendar').directive('mwlCalendar', function () {\n        return {\n            templateUrl: 'src/templates/calendar.html',\n            restrict: 'EA',\n            scope: {\n                events: '=',\n                view: '=',\n                viewTitle: '=',\n                currentDay: '=',\n                editEventHtml: '=',\n                deleteEventHtml: '=',\n                autoOpen: '=',\n                letChangeTheView: '=',\n                onEventClick: '&',\n                onEditEventClick: '&',\n                onDeleteEventClick: '&',\n                onTimespanClick: '&',\n                onDrillDownClick: '&',\n                dayViewStart: '@',\n                dayViewEnd: '@',\n                dayViewSplit: '@'\n            },\n            controller: [\n                '$scope',\n                '$timeout',\n                'moment',\n                'calendarTitle',\n                'calendarDebounce',\n                'calendarHelper',\n                function ($scope, $timeout, moment, calendarTitle, calendarDebounce, calendarHelper) {\n                    var vm = this;\n                    calendarHelper.writeLetChangeTheView($scope.letChangeTheView);\n                    vm.changeView = function (view, newDay) {\n                        $scope.view = view;\n                        $scope.currentDay = moment(newDay).toDate();\n                    };\n                    vm.changeDay = function (newDay) {\n                        $scope.currentDay = moment(newDay).toDate();\n                    };\n                    vm.drillDown = function (date, changeView) {\n                        var nextView = {\n                            'year': 'month',\n                            'month': 'day',\n                            'week': 'day'\n                        };\n                        if (calendarHelper.readSharedVariables().letChangeTheView) {\n                            if ($scope.onDrillDownClick({\n                                    calendarDate: moment(date).toDate(),\n                                    calendarNextView: nextView[$scope.view]\n                                }) !== false) {\n                                vm.changeView(nextView[$scope.view], date);\n                            }\n                        } else {\n                            vm.changeDay(date);\n                        }\n                    };\n                    //Use a debounce to prevent it being called 3 times on initialisation\n                    var refreshCalendar = calendarDebounce(function () {\n                        if (calendarTitle[$scope.view]) {\n                            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n                        }\n                        $scope.$broadcast('calendar.refreshView');\n                    }, 50);\n                    //Auto update the calendar when the locale changes\n                    var unbindLocaleWatcher = $scope.$watch(function () {\n                        return moment.locale();\n                    }, refreshCalendar);\n                    var unbindOnDestroy = [];\n                    unbindOnDestroy.push(unbindLocaleWatcher);\n                    //Refresh the calendar when any of these variables change.\n                    unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n                    unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n                    //Remove any watchers when the calendar is destroyed\n                    var unbindDestroyListener = $scope.$on('$destroy', function () {\n                        unbindOnDestroy.forEach(function (unbind) {\n                            unbind();\n                        });\n                    });\n                    unbindOnDestroy.push(unbindDestroyListener);\n                }\n            ]\n        };\n    });\n}(window, angular));","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .constant('moment', window.moment);\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarTitle', function (moment, calendarConfig) {\n\n    function day(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.day);\n    }\n\n    function week(currentDay) {\n      var weekTitleLabel = calendarConfig.titleFormats.week;\n      return weekTitleLabel.replace('{week}', moment(currentDay).week()).replace('{year}', moment(currentDay).format('YYYY'));\n    }\n\n    function month(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.month);\n    }\n\n    function year(currentDay) {\n      return moment(currentDay).format(calendarConfig.titleFormats.year);\n    }\n\n    return {\n      day: day,\n      week: week,\n      month: month,\n      year: year\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .factory('calendarHelper', function ($rootScope, moment, calendarConfig) {\n\n    var sharedVariables = {\n      daySelected: undefined,\n      currentDay: undefined,\n      letChangeTheView: true\n    };\n\n    function eventIsInPeriod(eventStart, eventEnd, periodStart, periodEnd) {\n\n      eventStart = moment(eventStart);\n      eventEnd = moment(eventEnd);\n      periodStart = moment(periodStart);\n      periodEnd = moment(periodEnd);\n\n      return (eventStart.isAfter(periodStart) && eventStart.isBefore(periodEnd)) ||\n        (eventEnd.isAfter(periodStart) && eventEnd.isBefore(periodEnd)) ||\n        (eventStart.isBefore(periodStart) && eventEnd.isAfter(periodEnd)) ||\n        eventStart.isSame(periodStart) ||\n        eventEnd.isSame(periodEnd);\n\n    }\n\n    function getEventsInPeriod(calendarDate, period, allEvents) {\n      var startPeriod = moment(calendarDate).startOf(period);\n      var endPeriod = moment(calendarDate).endOf(period);\n      return allEvents.filter(function(event) {\n        return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n      });\n    }\n\n    function getBadgeTotal(events) {\n      return events.filter(function(event) {\n        return event.incrementsBadgeTotal !== false;\n      }).length;\n    }\n\n    function dayStillSelected(day) {\n\n      if (sharedVariables.daySelected !== undefined) {\n        return moment(day).format('MMMM Do YYYY') === moment(sharedVariables.daySelected.date).format('MMMM Do YYYY');\n      }\n\n      return false;\n    }\n\n    function getWeekDayNames() {\n      var weekdays = [];\n      var count = 0;\n      while(count < 7) {\n        weekdays.push(moment().weekday(count++).format(calendarConfig.dateFormats.weekDay));\n      }\n      return weekdays;\n    }\n\n    function getYearView(events, currentDay) {\n\n      var view = [];\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'year', events);\n      var month = moment(currentDay).startOf('year');\n      var count = 0;\n      while (count < 12) {\n        var startPeriod = month.clone();\n        var endPeriod = startPeriod.clone().endOf('month');\n        var periodEvents = eventsInPeriod.filter(function(event) {\n          return eventIsInPeriod(event.startsAt, event.endsAt, startPeriod, endPeriod);\n        });\n        view.push({\n          label: startPeriod.format(calendarConfig.dateFormats.month),\n          isToday: startPeriod.isSame(moment().startOf('month')),\n          events: periodEvents,\n          date: startPeriod,\n          badgeTotal: getBadgeTotal(periodEvents)\n        });\n\n        month.add(1, 'month');\n        count++;\n      }\n\n      return view;\n\n    }\n\n    function getMonthView(events, currentDay) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'month', events);\n      var startOfMonth = moment(currentDay).startOf('month');\n      var day = startOfMonth.clone().startOf('week');\n      var endOfMonthView = moment(currentDay).endOf('month').endOf('week');\n      var view = [];\n      var today = moment().startOf('day');\n      while (day.isBefore(endOfMonthView)) {\n\n        var inMonth = day.month() === moment(currentDay).month();\n        var monthEvents = [];\n        if (inMonth) {\n          monthEvents = eventsInPeriod.filter(function(event) {\n            return eventIsInPeriod(event.startsAt, event.endsAt, day, day.clone().endOf('day'));\n          });\n\n          if(calendarConfig.month.eventFilterBy !== undefined) {\n            monthEvents = monthEvents.filter(function(event) {\n              return event.type === calendarConfig.month.eventFilterBy;\n            });\n          }\n\n        }\n\n        view.push({\n          label: day.date(),\n          date: day.clone(),\n          inMonth: inMonth,\n          isPast: today.isAfter(day),\n          isToday: today.isSame(day),\n          isFuture: today.isBefore(day),\n          isWeekend: [0, 6].indexOf(day.day()) > -1,\n          events: monthEvents,\n          badgeTotal: getBadgeTotal(monthEvents),\n          isSelected: dayStillSelected(day.clone()) // when user clicks the day is 'true'\n        });\n\n        day.add(1, 'day');\n      }\n\n      return view;\n\n    }\n\n    function getWeekView(events, currentDay) {\n\n      var startOfWeek = moment(currentDay).startOf('week');\n      var endOfWeek = moment(currentDay).endOf('week');\n      var dayCounter = startOfWeek.clone();\n      var days = [];\n      var today = moment().startOf('day');\n      while(days.length < 7) {\n        days.push({\n          weekDayLabel: dayCounter.format(calendarConfig.dateFormats.weekDay),\n          date: dayCounter.clone(),\n          dayLabel: dayCounter.format(calendarConfig.dateFormats.day),\n          isPast: dayCounter.isBefore(today),\n          isToday: dayCounter.isSame(today),\n          isFuture: dayCounter.isAfter(today),\n          isWeekend: [0, 6].indexOf(dayCounter.day()) > -1\n        });\n        dayCounter.add(1, 'day');\n      }\n\n      var eventsSorted = events.filter(function(event) {\n        return eventIsInPeriod(event.startsAt, event.endsAt, startOfWeek, endOfWeek);\n      }).map(function(event) {\n\n        var eventStart = moment(event.startsAt).startOf('day');\n        var eventEnd = moment(event.endsAt).startOf('day');\n        var weekViewStart = moment(startOfWeek).startOf('day');\n        var weekViewEnd = moment(endOfWeek).startOf('day');\n        var offset, span;\n\n        if (eventStart.isBefore(weekViewStart) || eventStart.isSame(weekViewStart)) {\n          offset = 0;\n        } else {\n          offset = eventStart.diff(weekViewStart, 'days');\n        }\n\n        if (eventEnd.isAfter(weekViewEnd)) {\n          eventEnd = weekViewEnd;\n        }\n\n        if (eventStart.isBefore(weekViewStart)) {\n          eventStart = weekViewStart;\n        }\n\n        span = moment(eventEnd).diff(eventStart, 'days') + 1;\n\n        event.daySpan = span;\n        event.dayOffset = offset;\n\n        return event;\n      });\n\n      return {days: days, events: eventsSorted};\n\n    }\n\n    function getDayView(events, currentDay, dayStartHour, dayEndHour, dayHeight) {\n\n      var eventsInPeriod = getEventsInPeriod(currentDay, 'day', events);\n      var calendarStart = moment(currentDay).startOf('day').add(dayStartHour, 'hours');\n      var calendarEnd = moment(currentDay).startOf('day').add(dayEndHour, 'hours');\n      var calendarHeight = (dayEndHour - dayStartHour + 1) * dayHeight;\n      var dayHeightMultiplier = dayHeight / 60;\n      var buckets = [];\n\n      return eventsInPeriod.filter(function(event) {\n        return eventIsInPeriod(\n          event.startsAt,\n          event.endsAt,\n          moment(currentDay).startOf('day').toDate(),\n          moment(currentDay).endOf('day').toDate()\n        );\n      }).map(function(event) {\n        if (moment(event.startsAt).isBefore(calendarStart)) {\n          event.top = 0;\n        } else {\n          event.top = (moment(event.startsAt).startOf('minute').diff(calendarStart.startOf('minute'), 'minutes') * dayHeightMultiplier) - 2;\n        }\n\n        if (moment(event.endsAt).isAfter(calendarEnd)) {\n          event.height = calendarHeight - event.top;\n        } else {\n          var diffStart = event.startsAt;\n          if (moment(event.startsAt).isBefore(calendarStart)) {\n            diffStart = calendarStart.toDate();\n          }\n          event.height = moment(event.endsAt).diff(diffStart, 'minutes') * dayHeightMultiplier;\n        }\n\n        if (event.top - event.height > calendarHeight) {\n          event.height = 0;\n        }\n\n        event.left = 0;\n\n        return event;\n      }).filter(function(event) {\n        return event.height > 0;\n      }).map(function(event) {\n\n        var cannotFitInABucket = true;\n        buckets.forEach(function(bucket, bucketIndex) {\n          var canFitInThisBucket = true;\n\n          bucket.forEach(function(bucketItem) {\n            if (eventIsInPeriod(event.startsAt, event.endsAt, bucketItem.startsAt, bucketItem.endsAt) ||\n              eventIsInPeriod(bucketItem.startsAt, bucketItem.endsAt, event.startsAt, event.endsAt)) {\n              canFitInThisBucket = false;\n            }\n          });\n\n          if (canFitInThisBucket && cannotFitInABucket) {\n            cannotFitInABucket = false;\n            event.left = bucketIndex * 150;\n            buckets[bucketIndex].push(event);\n          }\n\n        });\n\n        if (cannotFitInABucket) {\n          event.left = buckets.length * 150;\n          buckets.push([event]);\n        }\n\n        return event;\n\n      });\n\n    }\n\n    function readSharedVariables() {\n      return sharedVariables;\n    }\n\n    function readDaySelected() {\n      return sharedVariables.daySelected;\n    }\n\n    function writeDaySelected(day) {\n      sharedVariables.daySelected = day;\n      $rootScope.$broadcast('dayWasSelected');\n    }\n\n    function writeLetChangeTheView(bool) {\n\n      if(bool === undefined) {\n        bool = true;\n      }\n      sharedVariables.letChangeTheView = bool;\n    }\n\n    return {\n      getWeekDayNames: getWeekDayNames,\n      getYearView: getYearView,\n      getMonthView: getMonthView,\n      getWeekView: getWeekView,\n      getDayView: getDayView,\n      readSharedVariables: readSharedVariables,\n      readDaySelected: readDaySelected,\n      writeDaySelected: writeDaySelected,\n      writeLetChangeTheView: writeLetChangeTheView\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .service('calendarDebounce', function($timeout) {\n\n    function debounce(func, wait, immediate) {\n      var timeout;\n      return function() {\n        var context = this, args = arguments;\n        var later = function() {\n          timeout = null;\n          if (!immediate) {\n            func.apply(context, args);\n          }\n        };\n        var callNow = immediate && !timeout;\n        $timeout.cancel(timeout);\n        timeout = $timeout(later, wait);\n        if (callNow) {\n          func.apply(context, args);\n        }\n      };\n    }\n\n    return debounce;\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .provider('calendarConfig', function() {\n\n    var monthConfigs = {\n      eventFilterBy : undefined\n    };\n\n    var defaultDateFormats = {\n      hour: 'ha',\n      day: 'D MMM',\n      month: 'MMMM',\n      weekDay: 'dddd'\n    };\n\n    var defaultTitleFormats = {\n      day: 'dddd D MMMM, YYYY',\n      week: 'Week {week} of {year}',\n      month: 'MMMM YYYY',\n      year: 'YYYY'\n    };\n\n    var i18nStrings = {\n      eventsLabel: 'Events',\n      timeLabel: 'Time'\n    };\n\n    var configProvider = this;\n\n    configProvider.setDateFormats = function(formats) {\n      angular.extend(defaultDateFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setTitleFormats = function(formats) {\n      angular.extend(defaultTitleFormats, formats);\n      return configProvider;\n    };\n\n    configProvider.setI18nStrings = function(strings) {\n      angular.extend(i18nStrings, strings);\n      return configProvider;\n    };\n\n    configProvider.setMonthConfigs = function(configs) {\n      angular.extend(monthConfigs, configs);\n      return configProvider;\n    };\n\n    configProvider.$get = function() {\n      return {\n        dateFormats: defaultDateFormats,\n        titleFormats: defaultTitleFormats,\n        i18nStrings: i18nStrings,\n        month: monthConfigs\n      };\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarTruncateEventTitle', function() {\n\n    return function(string, length, boxHeight) {\n      if (!string) {\n        return '';\n      }\n\n      //Only truncate if if actually needs truncating\n      if (string.length >= length && string.length / 20 > boxHeight / 30) {\n        return string.substr(0, length) + '...';\n      } else {\n        return string;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .filter('calendarLimitTo', function() {\n\n    //Copied from the angular source. Only 1.4 has the begin functionality.\n    return function(input, limit, begin) {\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(limit);\n      }\n      if (isNaN(limit)) {\n        return input;\n      }\n\n      if (angular.isNumber(input)) {\n        input = input.toString();\n      }\n      if (!angular.isArray(input) && !angular.isString(input)) {\n        return input;\n      }\n\n      begin = (!begin || isNaN(begin)) ? 0 : parseInt(begin);\n      begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;\n\n      if (limit >= 0) {\n        return input.slice(begin, begin + limit);\n      } else {\n        if (begin === 0) {\n          return input.slice(limit, input.length);\n        } else {\n          return input.slice(Math.max(0, begin + limit), begin);\n        }\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlDateModifier', function() {\n\n    return {\n      restrict: 'A',\n      controller: function($element, $attrs, $scope, moment) {\n\n        function onClick() {\n          if (angular.isDefined($attrs.setToToday)) {\n            $scope.date = new Date();\n          } else if (angular.isDefined($attrs.increment)) {\n            $scope.date = moment($scope.date).add(1, $scope.increment).toDate();\n          } else if (angular.isDefined($attrs.decrement)) {\n            $scope.date = moment($scope.date).subtract(1, $scope.decrement).toDate();\n          }\n          $scope.$apply();\n        }\n\n        $element.bind('click', onClick);\n\n        $scope.$on('$destroy', function() {\n          $element.unbind('click', onClick);\n        });\n\n      },\n      scope: {\n        date: '=',\n        increment: '=',\n        decrement: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCollapseFallback', function($injector) {\n\n    if ($injector.has('collapseDirective')) {\n      return {};\n    }\n\n    return {\n      restrict: 'A',\n      controller: function($scope, $attrs, $element) {\n        var unbindWatcher = $scope.$watch($attrs.mwlCollapseFallback, function(shouldCollapse) {\n          if (shouldCollapse) {\n            $element.addClass('ng-hide');\n          } else {\n            $element.removeClass('ng-hide');\n          }\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarYear', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarYearView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper) {\n\n        var vm = this;\n        var firstRun = true;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getYearView($scope.events, $scope.currentDay);\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(month) {\n              if (moment($scope.currentDay).startOf('month').isSame(month.date)) {\n                vm.monthClicked(month, true);\n              }\n            });\n          }\n        });\n\n        vm.monthClicked = function(month, monthClickedFirstRun) {\n\n          if (!monthClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: month.date.toDate()});\n          }\n\n          vm.openEvents = month.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var monthIndex = vm.view.indexOf(month);\n            vm.openRowIndex = Math.floor(monthIndex / 4);\n          }\n\n        };\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarWeek', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarWeekView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, calendarHelper) {\n\n        var vm = this;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.view = calendarHelper.getWeekView($scope.events, $scope.currentDay);\n        });\n\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarSlideBox', function() {\n\n    return {\n      restrict: 'EA',\n      templateUrl: 'src/templates/calendarSlideBox.html',\n      replace: true,\n      controller: function($scope, $sce) {\n\n        var vm = this;\n        vm.$sce = $sce;\n\n        var unbindWatcher = $scope.$watch('isOpen', function(isOpen) {\n          vm.shouldCollapse = !isOpen;\n        });\n\n        var unbindDestroy = $scope.$on('$destroy', function() {\n          unbindDestroy();\n          unbindWatcher();\n        });\n\n      },\n      controllerAs: 'vm',\n      require: ['^?mwlCalendarMonth', '^?mwlCalendarYear'],\n      link: function(scope, elm, attrs, ctrls) {\n        scope.isMonthView = !!ctrls[0];\n        scope.isYearView = !!ctrls[1];\n      },\n      scope: {\n        isOpen: '=',\n        events: '=',\n        onEventClick: '=',\n        editEventHtml: '=',\n        onEditEventClick: '=',\n        deleteEventHtml: '=',\n        onDeleteEventClick: '='\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarMonth', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarMonthView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        onEditEventClick: '=',\n        onDeleteEventClick: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        onTimespanClick: '='\n      },\n      controller: function($scope, moment, calendarHelper) {\n\n        var vm = this;\n        var firstRun = true;\n\n        $scope.$on('calendar.refreshView', function() {\n          vm.weekDays = calendarHelper.getWeekDayNames();\n\n          vm.view = calendarHelper.getMonthView($scope.events, $scope.currentDay);\n          var rows = Math.floor(vm.view.length / 7);\n          vm.monthOffsets = [];\n          for (var i = 0; i < rows; i++) {\n            vm.monthOffsets.push(i * 7);\n          }\n\n          //Auto open the calendar to the current day if set\n          if ($scope.autoOpen && firstRun) {\n            firstRun = false;\n            vm.view.forEach(function(day) {\n              if (day.inMonth && moment($scope.currentDay).startOf('day').isSame(day.date)) {\n                vm.dayClicked(day, true);\n              }\n            });\n          }\n        });\n\n        vm.dayClicked = function(day, dayClickedFirstRun) {\n          unselectDaySelected(vm.view);\n          day.isSelected = true;\n\n          calendarHelper.writeDaySelected(day);\n\n          if (!dayClickedFirstRun) {\n            $scope.onTimespanClick({calendarDate: day.date.toDate()});\n          }\n\n          vm.view.forEach(function(monthDay) {\n            monthDay.isOpened = false;\n          });\n\n          vm.openEvents = day.events;\n          vm.openRowIndex = null;\n          if (vm.openEvents.length > 0) {\n            var dayIndex = vm.view.indexOf(day);\n            vm.openRowIndex = Math.floor(dayIndex / 7);\n            day.isOpened = true;\n          }\n\n        };\n\n        vm.highlightEvent = function(event, shouldAddClass) {\n\n          vm.view.forEach(function(day) {\n            delete day.highlightClass;\n            if (shouldAddClass) {\n              var dayContainsEvent = day.events.indexOf(event) > -1;\n              if (dayContainsEvent) {\n                day.highlightClass = 'day-highlight dh-event-' + event.type;\n              }\n            }\n          });\n\n        };\n\n        function unselectDaySelected(daysCollection) {\n          daysCollection.forEach(function(monthDay) {\n            monthDay.isSelected = false;\n          });\n        }\n      },\n      controllerAs: 'vm',\n      link: function(scope, element, attrs, calendarCtrl) {\n        scope.vm.calendarCtrl = calendarCtrl;\n\n        scope.vm.changeCurrentDay = function(date) {\n          scope.currentDay = date;\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendarDay', function() {\n\n    return {\n      templateUrl: 'src/templates/calendarDayView.html',\n      restrict: 'EA',\n      require: '^mwlCalendar',\n      scope: {\n        events: '=',\n        currentDay: '=',\n        onEventClick: '=',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($filter, $log, $rootScope, $scope, $timeout, moment, calendarHelper, calendarConfig) {\n\n        var vm = this;\n        var dayViewStart, dayViewEnd;\n\n        vm.calendarConfig = calendarConfig;\n\n        vm.hourWasClicked = function (params) {\n          $rootScope.$broadcast('hourWasClicked', params);\n          $log.debug('hourWasClicked');\n        };\n\n        vm.eventClicked = function(params) {\n          $rootScope.$broadcast('eventWasClicked', params);\n          $log.debug('eventWasClicked');\n        };\n\n        function updateDays() {\n          dayViewStart = moment($scope.dayViewStart || '00:00', 'HH:mm');\n          dayViewEnd = moment($scope.dayViewEnd || '23:00', 'HH:mm');\n          vm.dayViewSplit = parseInt($scope.dayViewSplit);\n          vm.dayHeight = (60 / $scope.dayViewSplit) * 30;\n          vm.days = [];\n          var dayCounter = moment(dayViewStart);\n          for (var i = 0; i <= dayViewEnd.diff(dayViewStart, 'hours'); i++) {\n            vm.days.push({\n              label: dayCounter.format(calendarConfig.dateFormats.hour)\n            });\n            dayCounter.add(1, 'hour');\n          }\n        }\n\n        var originalLocale = moment.locale();\n\n        $scope.$on('calendar.refreshView', function() {\n          if (originalLocale !== moment.locale()) {\n            originalLocale = moment.locale();\n            updateDays();\n          }\n\n          vm.view = calendarHelper.getDayView($scope.events, $scope.currentDay, dayViewStart.hours(), dayViewEnd.hours(), vm.dayHeight);\n\n        });\n\n        updateDays();\n\n      },\n      controllerAs: 'vm'\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mwl.calendar')\n  .directive('mwlCalendar', function() {\n\n    return {\n      templateUrl: 'src/templates/calendar.html',\n      restrict: 'EA',\n      scope: {\n        events: '=',\n        view: '=',\n        viewTitle: '=',\n        currentDay: '=',\n        editEventHtml: '=',\n        deleteEventHtml: '=',\n        autoOpen: '=',\n        letChangeTheView: '=',\n        onEventClick: '&',\n        onEditEventClick: '&',\n        onDeleteEventClick: '&',\n        onTimespanClick: '&',\n        onDrillDownClick: '&',\n        dayViewStart: '@',\n        dayViewEnd: '@',\n        dayViewSplit: '@'\n      },\n      controller: function($scope, $timeout, moment, calendarTitle, calendarDebounce, calendarHelper) {\n        var vm = this;\n\n        calendarHelper.writeLetChangeTheView($scope.letChangeTheView);\n\n        vm.changeView = function(view, newDay) {\n          $scope.view = view;\n          $scope.currentDay = moment(newDay).toDate();\n        };\n\n        vm.changeDay = function(newDay) {\n          $scope.currentDay = moment(newDay).toDate();\n        };\n\n        vm.drillDown = function(date, changeView) {\n\n          var nextView = {\n            'year': 'month',\n            'month': 'day',\n            'week': 'day'\n          };\n\n          if(calendarHelper.readSharedVariables().letChangeTheView) {\n            if ($scope.onDrillDownClick({calendarDate: moment(date).toDate(),\n                calendarNextView: nextView[$scope.view]}) !== false) {\n              vm.changeView(nextView[$scope.view], date);\n            }\n          } else {\n            vm.changeDay(date);\n          }\n\n        };\n\n        //Use a debounce to prevent it being called 3 times on initialisation\n        var refreshCalendar = calendarDebounce(function() {\n          if (calendarTitle[$scope.view]) {\n            $scope.viewTitle = calendarTitle[$scope.view]($scope.currentDay);\n          }\n          $scope.$broadcast('calendar.refreshView');\n        }, 50);\n\n        //Auto update the calendar when the locale changes\n        var unbindLocaleWatcher = $scope.$watch(function() {\n          return moment.locale();\n        }, refreshCalendar);\n\n        var unbindOnDestroy = [];\n        unbindOnDestroy.push(unbindLocaleWatcher);\n\n        //Refresh the calendar when any of these variables change.\n        unbindOnDestroy.push($scope.$watch('currentDay', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('view', refreshCalendar));\n        unbindOnDestroy.push($scope.$watch('events', refreshCalendar, true));\n\n        //Remove any watchers when the calendar is destroyed\n        var unbindDestroyListener = $scope.$on('$destroy', function() {\n          unbindOnDestroy.forEach(function(unbind) {\n            unbind();\n          });\n        });\n        unbindOnDestroy.push(unbindDestroyListener);\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}